---
- name: Localhost setup
  hosts: localhost
  vars:
    copr_repos:
      - alebastr/swayr
      - atim/lazygit
      - atim/starship
      - atim/bottom
      - tofik/nwg-shell
      - xbt573/gdu
    rpmfusion_base_url: "https://rpmfusion.org"
    rpmfusion_keys_base_url: "{{ rpmfusion_base_url }}/keys?action=AttachFile&do=get&target="
    rpmfusion_repo_base_url: "http://download1.rpmfusion.org"
    git_lfs_repo_add_script_url: "https://packagecloud.io/install/repositories/github/git-lfs/script.rpm.sh"
    git_lfs_script: /tmp/rpm.sh
    distribution: "{{ ansible_distribution | lower }}"
    astronvim_url: "https://github.com/AstroNvim/template"
    nvim_config: "{{ ansible_env.HOME }}/.config/nvim"
    dotfiles_dir: "{{ ansible_env.HOME }}/dotfiles"
    stow_dir: "{{ ansible_env.HOME }}"
    asdf_version: v0.14.1
    asdf_git_url: https://github.com/asdf-vm/asdf.git
    asdf_dir: "{{ ansible_env.HOME }}/.asdf"
    asdf_source_script: "{{ asdf_dir }}/asdf.sh"
    asdf_plugins:
      - deno
    flatpak_packages:
      - com.github.IsmaelMartinez.teams_for_linux
      - sh.cider.Cider
    dnf_group_packages:
      - "@Development tools"
      - "@Development libraries"
      - "@C development tools and libraries"
      - "@Python science"
      - "@Sound and video"
    dnf_packages:
      - alacritty
      - curl
      - eza
      - fd-find
      - flatpak
      - fzf
      - git
      - ripgrep
      - ranger
      - starship
      - stow
      - wget
      - zoxide
      - zsh
      - kvantum
      - mako
      - nwg-look
      - qt5ct
      - qt6ct
      - swayr
      - xsettingsd
      - python3-libtmux
      - python3-pip
      - ansifilter
      - bat
      - bottom
      - cmake
      - cheat
      - direnv
      - feh
      - git-delta
      - jq
      - khard
      - khal
      - lazygit
      - neovim
      - zathura
      - cargo
      - compat-lua
      - composer
      - golang
      - java-latest-openjdk
      - julia
      - luarocks
      - perl-CPAN
      - rubygems
      - rustup
      - gdu
      - sad
      - git-lfs
    stow_packages:
      - alacritty
      - zsh
      - gtk-2.0
      - gtk-3.0
      - gtk-4.0
      - Kvantum
      - mako
      - nwg-look
      - qt5ct
      - qt6ct
      - xresources
      - xsettingsd
      - git
      - starship
      - bat
      - cheat
      - delta
      - direnv
      - fd
      - khard
      - khal
      - lazygit
      - nvim
      - ranger
      - ripgrep
      - zathura
      - rofi
      - sway
      - swaylock
      - swaynag
      - waybar

  tasks:
    - name: Check that system is updated
      become: true
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Enable Copr repos
      become: true
      community.general.copr:
        host: copr.fedorainfracloud.org
        state: enabled
        name: "{{ item }}"
      loop: "{{ copr_repos }}"

    - name: Install RPM Fusion Repo GPG keys
      become: true
      ansible.builtin.rpm_key:
        key: "{{ rpmfusion_keys_base_url }}RPM-GPG-KEY-rpmfusion-{{ item }}-{{ distribution }}-2020"
        state: present
      loop:
        - "free"
        - "nonfree"

    - name: Install RPM Fusion Repo Packates
      become: true
      ansible.builtin.dnf:
        name: "{{ rpmfusion_repo_base_url }}/{{ item }}/{{ distribution }}/rpmfusion-{{ item }}-release-{{ ansible_distribution_version }}.noarch.rpm"
        state: present
      loop:
        - "free"
        - "nonfree"

    - name: Get Repolist
      command: "dnf repolist"
      register: dnf_repolist
      changed_when: false

    - name: Checking if Git LFS repo has been added
      set_fact:
        git_lfs_repo_added: "{{ 'true' if (dnf_repolist.stdout | regex_search('git-lfs')) else 'false' }}"

    - name: Download Git LFS installation script
      ansible.builtin.get_url:
        url: "{{ git_lfs_repo_add_script_url }}"
        dest: "{{ git_lfs_script }}"
        mode: '0755'
      when: git_lfs_repo_added == 'false'

    - name: Run Git LFS repo installation script
      become: true
      command: "{{ git_lfs_script }}"
      when: git_lfs_repo_added == 'false'

    - name: Set system to use fedora-cisco-openh264
      become: true
      community.general.dnf_config_manager:
        name: fedora-cisco-openh264
        state: enabled

    - name: Remove ffmpeg-free
      become: true
      ansible.builtin.dnf:
        name: ffmpeg-free
        state: absent

    - name: Install ffmpeg
      become: true
      ansible.builtin.dnf:
        name: ffmpeg
        state: latest

    - name: Upgrade all packages
      become: true
      ansible.builtin.dnf:
        name: "*"
        state: latest

    - name: Install additional packages
      become: true
      ansible.builtin.dnf:
        name: "{{ dnf_packages }}"
        state: latest

    - name: Install Intel Media Driver for Intel Integrated GPU
      become: true
      ansible.builtin.dnf:
        name: intel-media-driver
        state: latest

    - name: Update multimedia group
      become: true
      ansible.builtin.dnf:
        name: "@multimedia"
        state: latest
        install_weak_deps: false
        exclude: PackageKit-gstreamer-plugin

    - name: Install Group Packages
      become: true
      ansible.builtin.dnf:
        name: "{{ dnf_group_packages }}"
        state: latest

    - name: Add flathub flatpak remote
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://dl.flathub.org/repo/flathub.flatpakrepo

    - name: Add flatpak packages from flathub
      community.general.flatpak:
        name: "{{ flatpak_packages }}"
        state: latest

    - name: Download asdf git repo
      ansible.builtin.git:
        repo: "{{ asdf_git_url }}"
        dest: "{{ asdf_dir }}"
        version: "{{ asdf_version }}"

    - name: Add plugins to asdf
      ansible.builtin.shell: |
        source {{ asdf_source_script }}
        asdf plugin add {{ item }}
      register: task
      failed_when: task.rc >= 1 and 'already added' not in task.stderr
      changed_when: false
      loop: "{{ asdf_plugins }}"

    - name: Install latest version of plugins using asdf
      ansible.builtin.shell: |
        source {{ asdf_source_script }}
        asdf install {{ item }} latest
      register: task
      failed_when: task.rc > 0 or 'fatal' in task.stdout or 'error' in task.stdout
      changed_when: false
      loop: "{{ asdf_plugins }}"

    - name: Set asdf plugin versions
      ansible.builtin.shell: |
        source {{ asdf_source_script }}
        asdf global {{ item }} latest
      changed_when: false
      loop: "{{ asdf_plugins }}"

    - name: Check if nvim has already received its config
      stat:
        path: "{{ nvim_config }}/lua"
      register: lua_link_status

    - name: Clone AstroNvim template
      ansible.builtin.git:
        repo: "{{ astronvim_url }}"
        dest: "{{ nvim_config }}"
        depth: 1
      when: not lua_link_status.stat.islnk

    - name: Remove unnecessary directories from ~/.config/nvim
      ansible.builtin.file:
        name: "{{ item }}"
        state: absent
      loop:
        - "{{ nvim_config }}/.git"
        - "{{ nvim_config }}/lua"
      when: not lua_link_status.stat.islnk

    - name: Use stow to populate ~/.config
      ansible.builtin.shell: |
        stow -d {{ dotfiles_dir }} -t {{ stow_dest }} -v --dotfiles {{ item }}
      register: stow_task
      loop: "{{ stow_packages }}"
      when: LINK in stow_task.stdout
