[init]
  defaultBranch=main

[credential]
 helper = store
 # Enable HTTP(S) auth credential caching
 # for 60 seconds (requires git 1.7.9+)
 helper = cache --timeout 60

[help]
  autocorrect = prompt # Prompt before autocorrecting typos

[user]
 name = William Smith
 email = william@williamgsmith.co.za

[core]
  editor = nvim
  pager = delta
  whitespace = trailing-space,space-before-tab
  excludesfile = ~/.config/git/.gitignore
  # do not quote non-ascii characters; display unicode as-is
  quotepath = false
  editor = nvim
  attributesFile = ~/.config/git/gitattributes

[push]
  default = current
  autoSetupRemote = true
  followTags = true
  recurseSubmodules = check # See: https://stackoverflow.com/questions/5814319/git-submodules-push

[commit]
  verbose = true
  template = ~/.config/git/.gittemplates/commit

[diff]
  algorithm = histogram
  colorMoved = plain
  renames = copies
  mnemonicprefix = true # [i]index, [w]ord tree, [c]ommit, [o]bjec

[grep]
  lineNumber = true

[interactive]
  diffFilter = delta --color-only

[merge]
  conflictstyle = zdiff3 # Improved merge conflict markers (Git >= 2.35)
  ff = false
  stat = true
  tool = mergetool

[branch]
  sort = -committerdate

[tag]
  sort = version:refname

[advice]
  statusHints = false
  pushNonFastFastforward = false

[log]
  mailmap = true

[alias]
  prune = fetch --prune
  undo = reset --soft HEAD^
  d = difftool
  reword = commit --amend
  fuck = reset --hard
  amend = commit --amend --no-edit
  wip = !git add --all && git commit am 'WIP'
  popwip = !git log -1 --pretty=%B | grep -q '^WIP$' && git reset HEAD^ || echo 'HEAD is not a WIP commit'
  pt = !git tag -l | xargs tag -d && git fetch -t # prune tags.

  root = rev-parse --show-toplevel
  rt = !git fetch origin tip:tip | git rebase tip
  unstage = reset HEAD --
  recent = for-each-ref --count=10 --sort=committerdate refs/heads/ --format="%(refname:short)"
  today = !git log --all --since=00:00:00 --oneline --no-merges --author=${1-$(git config user.email)}

  history = log --graph --decoreate \
   --pretty=format:'%C(yellow)%h%Creset %C(auto)%d%Creset %s %Cgreen(%ar) %C(bold blue)<%aan>%Creset' \
   --abbrev-commit --date=short --date-order

  partial-clone = clone --filter=blob:ncredential]
  alias = ! git config --get-regexp ^alias\\. | sed -e s/^alias\\.// -e s/\\ /\\ =\\ /

[include]
  path=$HOME/dotfiles/delta/dot-config/delta/catppuccin-macchiato.gitconfig

[delta]
  side-by-side = false
  decorations = true
  width = variable
  hyperlinks = true
  true-color = always
  relative-paths = true
  light = false
  hyperlinks-file-link-format = "http://o/file/{path}:{line}"

[delta "decorations"]
  commit-decoration-style = blue ol
  commit-style = raw
  file-style = omit blue
  hunk-header-decoration-style = blue box
  hunk-header-file-style = red
  hunk-header-line-number-style = "#067a00"
  hunk-header-style = file line-number syntax
  grep-file-style = red

[mergetool "mergetool"]
  cmd = nvim -f -c "MergetoolStart" "$MERGED" "$BASE" "$LOCAL" "$REMOTE"
  trustExitCode = true

[difftool]
  prompt = false
  trustExitCode = true

[mergetool]
  prompt = false

[fetch]
  # https://spin.atomic.com/2020/05/05/git-configurations-default
  prune = true
  pruneTags = true
  all = true

[pull]
  # https://spin.atomic.com/2020/05/05/git-configurations-default
  rebase = true

[rebase]
  autoSquash = true # Autosquash fixup! and squash! commits
  autoStash = false # Automatically stash/stash pop before and after rebase
  updateRefs = true # Update local refs after rebase

[rerere] # See rerere docs at https://git-scm.com/blog/2010/03/08/rerere.html
  enabled = true # Remember how you resolved conflicts
  autoupdate = true # Automatically update the index if conflicts are found

[status]
  showUntrackedFiles = all

[color "blame"]
  highlightRecent = white,1 month ago,yellow,1 week ago,red

[filter "lfs"]
 process = git-lfs filter-process
 required = true
 clean = git-lfs clean -- %f
 smudge = git-lfs smudge -- %f
