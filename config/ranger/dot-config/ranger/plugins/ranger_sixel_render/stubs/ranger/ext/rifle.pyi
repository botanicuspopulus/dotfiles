from _typeshed import Incomplete
from collections.abc import Generator
from ranger.ext.get_executables import get_executables as get_executables
from ranger.ext.popen_forked import Popen_forked as Popen_forked

__version__: str
DEFAULT_PAGER: str
DEFAULT_EDITOR: str
ASK_COMMAND: str
ENCODING: str

def squash_flags(flags): ...

class Rifle:
    delimiter1: str
    delimiter2: str
    def hook_before_executing(self, command, mimetype, flags) -> None: ...
    def hook_after_executing(self, command, mimetype, flags) -> None: ...
    @staticmethod
    def hook_command_preprocessing(command): ...
    @staticmethod
    def hook_command_postprocessing(command): ...
    @staticmethod
    def hook_environment(env): ...
    @staticmethod
    def hook_logger(string) -> None: ...
    config_file: Incomplete
    rules: Incomplete
    def __init__(self, config_file) -> None: ...
    def reload_config(self, config_file: Incomplete | None = None) -> None: ...
    def get_mimetype(self, fname): ...
    def list_commands(self, files, mimetype: Incomplete | None = None, skip_ask: bool = False) -> Generator[Incomplete]: ...
    def execute(self, files, number: int = 0, label: Incomplete | None = None, flags: str = '', mimetype: Incomplete | None = None): ...

def find_conf_path(): ...
def main() -> None: ...
