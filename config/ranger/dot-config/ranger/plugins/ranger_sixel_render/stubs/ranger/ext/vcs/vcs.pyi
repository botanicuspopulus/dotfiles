import threading
from .bzr import Bzr as Bzr
from .git import Git as Git
from .hg import Hg as Hg
from .svn import SVN as SVN
from _typeshed import Incomplete
from ranger.ext import spawn as spawn

class VcsError(Exception): ...

class Vcs:
    INDEX: str
    HEAD: str
    NONE: str
    REPOTYPES: Incomplete
    DIRSTATUSES: Incomplete
    obj: Incomplete
    path: Incomplete
    repotypes_settings: Incomplete
    is_root: Incomplete
    is_root_link: Incomplete
    is_root_pointer: Incomplete
    in_repodir: bool
    rootvcs: Incomplete
    track: bool
    __class__: Incomplete
    def __init__(self, dirobj) -> None: ...
    def reinit(self) -> None: ...
    def action_add(self, filelist) -> None: ...
    def action_reset(self, filelist) -> None: ...
    def data_status_root(self) -> None: ...
    def data_status_subpaths(self) -> None: ...
    def data_status_remote(self) -> None: ...
    def data_branch(self) -> None: ...
    def data_info(self, rev: Incomplete | None = None) -> None: ...

class VcsRoot(Vcs):
    rootinit: bool
    head: Incomplete
    branch: Incomplete
    updatetime: Incomplete
    status_subpaths: Incomplete
    def init_root(self): ...
    def update_root(self): ...
    def update_tree(self, purge: bool = False) -> None: ...
    def check_outdated(self): ...
    def status_subpath(self, path, is_directory: bool = False): ...

class VcsThread(threading.Thread):
    daemon: bool
    stopped: Incomplete
    paused: Incomplete
    def __init__(self, ui) -> None: ...
    def run(self) -> None: ...
    def stop(self): ...
    def pause(self) -> None: ...
    def unpause(self) -> None: ...
    def process(self, dirobj) -> None: ...

class BzrRoot(VcsRoot, Bzr): ...
class GitRoot(VcsRoot, Git): ...
class HgRoot(VcsRoot, Hg): ...
class SVNRoot(VcsRoot, SVN): ...
