from _typeshed import Incomplete
from ranger.api import LinemodeBase as LinemodeBase, hook_init as hook_init, hook_ready as hook_ready, register_linemode as register_linemode
from ranger.core.shared import FileManagerAware

__all__ = ['Command', 'LinemodeBase', 'hook_init', 'hook_ready', 'register_linemode']

class CommandContainer(FileManagerAware):
    commands: Incomplete
    def __init__(self) -> None: ...
    def __getitem__(self, key): ...
    def alias(self, name, full_command) -> None: ...
    def load_commands_from_module(self, module) -> None: ...
    def load_commands_from_object(self, obj, filtr) -> None: ...
    def get_command(self, name, abbrev: bool = False): ...
    def command_generator(self, start): ...

class Command(FileManagerAware):
    name: Incomplete
    allow_abbrev: bool
    resolve_macros: bool
    escape_macros_for_shell: bool
    quantifier: Incomplete
    quickly_executed: bool
    def __init__(self, line, quantifier: Incomplete | None = None) -> None: ...
    line: Incomplete
    args: Incomplete
    firstpart: Incomplete
    def init_line(self, line) -> None: ...
    @classmethod
    def get_name(cls): ...
    def execute(self) -> None: ...
    def tab(self, tabnum) -> None: ...
    def quick(self) -> None: ...
    def cancel(self) -> None: ...
    def arg(self, n): ...
    def rest(self, n): ...
    def start(self, n): ...
    def shift(self) -> None: ...
    def parse_setting_line(self): ...
    def parse_setting_line_v2(self): ...
    def parse_flags(self): ...
    def log(self): ...
