from _typeshed import Incomplete
from ranger.ext.widestring import WideString as WideString, utf_char_width as utf_char_width

PY3: Incomplete

class Bar:
    left: Incomplete
    right: Incomplete
    gap: Incomplete
    def __init__(self, base_color_tag) -> None: ...
    def add(self, *a, **kw) -> None: ...
    def addright(self, *a, **kw) -> None: ...
    def sumsize(self): ...
    def fixedsize(self): ...
    def shrink_by_removing(self, wid) -> None: ...
    def shrink_from_the_left(self, wid): ...
    def fill_gap(self, char, wid, gapwidth: bool = False) -> None: ...
    def combine(self): ...

class BarSide(list):
    base_color_tag: Incomplete
    def __init__(self, base_color_tag) -> None: ...
    def add(self, string, *lst, **kw) -> None: ...
    def add_space(self, n: int = 1) -> None: ...
    def sumsize(self): ...
    def fixedsize(self): ...

class ColoredString:
    string: Incomplete
    lst: Incomplete
    fixed: bool
    min_size: int
    def __init__(self, string, *lst) -> None: ...
    def cut_off(self, n) -> None: ...
    def cut_off_to(self, n) -> None: ...
    def __len__(self) -> int: ...
