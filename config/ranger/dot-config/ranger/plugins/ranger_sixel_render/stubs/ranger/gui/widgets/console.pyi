from _typeshed import Incomplete
from ranger.container.history import History as History, HistoryEmptyException as HistoryEmptyException
from ranger.ext.direction import Direction as Direction
from ranger.ext.widestring import WideString as WideString, uwid as uwid
from ranger.gui.widgets import Widget as Widget

class Console(Widget):
    visible: bool
    last_cursor_mode: Incomplete
    history_search_pattern: Incomplete
    prompt: str
    copy: str
    tab_deque: Incomplete
    original_line: Incomplete
    history: Incomplete
    history_backup: Incomplete
    override: Incomplete
    allow_close: bool
    historypath: Incomplete
    wait_for_command_input: bool
    unicode_buffer: str
    pos: int
    line: str
    question_queue: Incomplete
    def __init__(self, win) -> None: ...
    def destroy(self) -> None: ...
    def draw(self) -> None: ...
    def finalize(self) -> None: ...
    def open(self, string: str = '', prompt: Incomplete | None = None, position: Incomplete | None = None): ...
    def close(self, trigger_cancel_function: bool = True) -> None: ...
    def clear(self) -> None: ...
    def press(self, key) -> None: ...
    def type_key(self, key) -> None: ...
    def history_move(self, n) -> None: ...
    def add_to_history(self) -> None: ...
    def move(self, **keywords) -> None: ...
    def move_word(self, **keywords) -> None: ...
    @staticmethod
    def move_by_word(line, position, direction): ...
    def delete_rest(self, direction) -> None: ...
    def paste(self) -> None: ...
    def delete_word(self, backward: bool = True) -> None: ...
    def delete(self, mod) -> None: ...
    def execute(self, cmd: Incomplete | None = None) -> None: ...
    def get_cmd_class(self): ...
    def tab(self, tabnum: int = 1) -> None: ...
    def on_line_change(self) -> None: ...
    def ask(self, text, callback, choices: Incomplete | None = None) -> None: ...
