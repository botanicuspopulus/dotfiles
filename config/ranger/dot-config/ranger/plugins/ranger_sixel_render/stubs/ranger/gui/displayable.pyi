from _typeshed import Incomplete
from ranger.core.shared import FileManagerAware as FileManagerAware
from ranger.gui.curses_shortcuts import CursesShortcuts as CursesShortcuts

class Displayable(FileManagerAware, CursesShortcuts):
    env: Incomplete
    fm: Incomplete
    settings: Incomplete
    need_redraw: bool
    focused: bool
    visible: bool
    x: int
    y: int
    wid: int
    hei: int
    paryx: Incomplete
    parent: Incomplete
    win: Incomplete
    def __init__(self, win, env: Incomplete | None = None, fm: Incomplete | None = None, settings: Incomplete | None = None) -> None: ...
    def __nonzero__(self): ...
    __bool__ = __nonzero__
    def __contains__(self, item) -> bool: ...
    def draw(self) -> None: ...
    def destroy(self) -> None: ...
    def contains_point(self, y, x): ...
    def click(self, event) -> None: ...
    def press(self, key) -> None: ...
    def poke(self) -> None: ...
    def finalize(self) -> None: ...
    def resize(self, y, x, hei: Incomplete | None = None, wid: Incomplete | None = None) -> None: ...

class DisplayableContainer(Displayable):
    env: Incomplete
    fm: Incomplete
    settings: Incomplete
    container: Incomplete
    def __init__(self, win, env: Incomplete | None = None, fm: Incomplete | None = None, settings: Incomplete | None = None) -> None: ...
    def poke(self) -> None: ...
    need_redraw: bool
    def draw(self) -> None: ...
    def finalize(self) -> None: ...
    def press(self, key): ...
    def click(self, event): ...
    def destroy(self) -> None: ...
    def add_child(self, obj) -> None: ...
    def replace_child(self, old_obj, new_obj) -> None: ...
    def remove_child(self, obj) -> None: ...
    def get_focused_obj(self): ...
