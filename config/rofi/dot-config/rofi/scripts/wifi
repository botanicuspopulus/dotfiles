#!/usr/bin/env zsh

set -o pipefail
set -o errexit

function scan_networks() {
  local chosen_connection=$1

  local active ssid security bars bandwidth rate request_fields
  local request_fields=ACTIVE,SSID,SECURITY,BARS,RATE,BANDWIDTH

  local networks=$(nmcli --fields $request_fields device wifi list ifname "$chosen_connection" | jc --nmcli)

  echo "$networks"
}

function rofi_cmd() {
    local list=$1
    local prompt=$2

    local lines=$(echo -e "$list" | wc -l)

    if ((lines > 5)); then
        lines=5
    fi

    echo -e "$list" | rofi -dmenu \
         -i \
         -p "$prompt" \
         -theme-str 'window { width: 40%; }' \
         -no-custom \
         -l "$lines"
}

function get_identity() {
  local ssid=$1
  local identity=$(printf "" | rofi -dmenu -theme minimal_prompt -p "󰍀  Identity for $ssid:")
  if [[ -z $identity ]]; then
    notify-send "No identity provided"
    return 1
  fi
  echo "$identity"
}

function get_password() {
  local ssid=$1
  local password=$(printf "" | rofi -dmenu -theme minimal_prompt -password -p "󰍀  Password for $ssid:")
  if [[ -z $password ]]; then
    notify-send "No password provided"
    return 1
  fi
  echo "$password"
}

function get_device() {
  local devices=$(nmcli --fields DEVICE,TYPE device status | awk '/wifi/ && !/p2p/ {print $1}')
  if [[ -z $devices ]]; then
    notify-send "No Wi-Fi connections found"
    return 1
  fi

  local selected_device=$(rofi_cmd "$devices" "󰈀  Network Interface")

  echo "$selected_device"
}

function get_network_index() {
  local networks=$1
  local network_count=$(jq -r '. | length' <<< "$networks")

  ((network_count > 5)) && network_count=5

  jq -r '
    def pad(n): . + (" " * (n - length));

    def is_active(a): if a == "yes" then "󰖩 " else "󰖪 " end;

    def security_icon(s):
      if s == null then "󰣯 "
      elif s | test("WPA3") then "󰍁 "
      elif s | test("WPA2") then "󰍁 "
      elif s | test("WPA") then "󰍁 "
      elif s | test("WEP") then "󰍀 "
      elif s | test("802.1X") then " "
      elif s == "--" then "󱄙 "
      else "󰣯 " end;

      sort_by([-(if .active == "yes" then 1 else 0 end), (.bars|length)]) 
      | .[] 
      | (
          "\(is_active(.active) | pad(4)) " +
          "\(.ssid | pad(30)) " +
          "\(security_icon(.security)) " +
          "\(.bandwidth | pad(10)) " +
          "\(.rate | pad(10)) " + 
          "\(.bars | pad(5))"
        )
    ' <<< "$networks" | rofi -dmenu \
      -i -no-custom \
      -format 'i' \
      -l "$network_count" \
      -p "󱄙  Wi-Fi Networks" \
      -theme-str 'window { width: 40%; }'
}

function connect_to_8021x() {
  if [[ -z $1 ]]; then
    notify-send "No network provided"
    return 1
  fi

  local network=$1

  local ssid=$(jq -r '.ssid' <<< "$network")
  local identity=$(get_identity "$ssid")
  if [[ $identity == "" ]]; then
    return 1
  fi

  local password=$(get_password "$ssid")
  if [[ $password == "" ]]; then
    return 1
  fi

  if nmcli connection show "$ssid" >/dev/null 2>&1; then
    nmcli connection modify "$ssid" \
      802-1x.identity "$identity" \
      802-1x.password "$password" \
      802-1x.eap peap
    notify-send "Updated connection for $ssid"
  else
    nmcli connection add type wifi con-name "$ssid" \
      802-11-wireless.ssid "$ssid" \
      802-11-wireless-security.key-mgmt wpa-eap \
      802-1x.identity "$identity" \
      802-1x.password "$password" \
      802-1x.eap peap \
      802-1x.phase2-auth mschapv2
    notify-send "Added connection for $ssid"
  fi

  sudo tee "/etc/NetworkManager/system-connections/$ssid" > /dev/null <<EOF
[connection]
id=$ssid

[802-1x]
password=$password
EOF

  sudo chmod 600 "/etc/NetworkManager/system-connections/$ssid"

  sudo systemctl restart NetworkManager
  sleep 2
  nmcli connection up "$ssid"
}

function connect_to_wpa() {
  if [[ -z $1 ]]; then
    notify-send "No network provided"
    return 1
  fi

  local network=$1

  local ssid=$(jq -r '.ssid' <<< "$network")
  local password=$(get_password "$ssid")
  if [[ $? -ne 0 ]]; then
    exit 1
  fi

  nmcli device wifi connect "$ssid" password "$password"
}

function main() {
  local selected_device=$(get_device)
  if [[ -z $selected_device ]]; then
    notify-send "No device selected"
    return 1
  fi

  local available_networks=$(scan_networks "$selected_device")
  if [[ -z $available_networks ]]; then
    notify-send "No networks found"
    return 1
  fi

  local network_index=$(get_network_index "$available_networks")
  if [[ -z $network_index ]]; then
    notify-send "No network selected"
    return 1
  fi

  local network=$(jq -r --argjson "index" "$network_index" '.[$index]' <<< "$available_networks")
  local security=$(jq -r '.security' <<< "$network")

  case $security in
    WPA3|WPA2|WPA)
      connect_to_wpa "$network"
      ;;
    *"802.1X"*)
      connect_to_8021x "$network"
      ;;
    *)
      notify-send "No authentication method found"
      return 1
      ;;
  esac
}

main
